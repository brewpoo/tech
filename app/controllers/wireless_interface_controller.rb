class WirelessInterfaceController < ApplicationController

  active_scaffold :wireless_interface do |config|
    list.columns = [:contact, :hardware_address, :description, :is_enabled, :expires_on]
    list.per_page = 50
    create.columns = update.columns = [:contact, :hardware_address, :description, :is_enabled, :expires_on]
    action_links.add('commit', :label => 'Commit Changes', :type => :table,
                     :crud_type => :create, :inline => false)
    # Search and Sort
    columns[:contact].sort_by :sql => 'contacts.last_name'
    columns[:contact].search_sql = 'contacts.last_name'
    search.columns << [:contact]
  end

  def commit
    apply
    deploy
    redirect_to :action => 'list'
  end

  def apply
    @output_filters = WirelessOutputFilter.find_all_by_is_active(1)
    @interfaces = WirelessInterface.find_all_by_is_enabled(1)
    outfile = File.new("/tmp/users", "w+")
    outfile << "# This file is autogenerated, do NOT edit it.\n# Please go to http://#{$settings[:fqdn]}/wireless_interface to add/remove access\n"
    @interfaces.each do |i|
        outfile << "# " << i.contact.first_name << ' ' << i.contact.last_name << "\n"
      @output_filters.each do |f|
        line = Kernel.eval(f.output_filter)
        outfile << line << "\n"
      end
    end
    outfile.close
  end

  def deploy
    if File.readable?("/tmp/users")
      `scp /tmp/users nots@tiorli:` if ENV['RAILS_ENV']=='production'
      flash[:notice]="Transfer complete: The RADIUS server is refreshed every 5 minutes" unless request.nil?
    else
      flash[:notice]="Error: Could not read output file" unless request.nil?
    end
  end

end

module Kernel
  def addDashes(address, dash="-")
    address=address[0..1]+dash+address[2..3]+dash+address[4..5]+dash+address[6..7]+dash+address[8..9]+dash+address[10..11]
  end
end

